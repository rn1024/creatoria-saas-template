services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: creatoria_postgres
    restart: unless-stopped
    ports:
      - "55432:5432" # host:container (changed host port to avoid conflicts)
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: creatoria
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - creatoria_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: creatoria_mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: creatoria
      MYSQL_USER: creatoria
      MYSQL_PASSWORD: creatoria
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - creatoria_network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB 数据库
  mongodb:
    image: mongo:6.0
    container_name: creatoria_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: creatoria
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - creatoria_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: creatoria_redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # changed host port to avoid conflicts
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - creatoria_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer 数据库管理工具（可选）
  adminer:
    image: adminer:latest
    container_name: creatoria_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DESIGN: pepa-linha
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - creatoria_network
    depends_on:
      - postgres
      - mysql

  # RedisInsight Redis 管理工具（可选）
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: creatoria_redis_insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - creatoria_network
    depends_on:
      - redis

  # MinIO 对象存储（可选）
  minio:
    image: minio/minio:latest
    container_name: creatoria_minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - creatoria_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RabbitMQ 消息队列（可选）
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: creatoria_rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - creatoria_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_insight_data:
    driver: local

networks:
  creatoria_network:
    driver: bridge
